basePath: /
definitions:
  models.Comment:
    properties:
      content:
        type: string
      recipe_id:
        description: gorm.Model
        type: integer
      user_id:
        type: integer
    type: object
  models.Rating:
    properties:
      recipe_id:
        description: gorm.Model
        type: integer
      score:
        type: integer
      user_id:
        type: integer
    type: object
  models.Recipe:
    properties:
      author_id:
        type: integer
      description:
        type: string
      title:
        description: gorm.Model
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        description: gorm.Model
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the server for a recipe application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Recipe App API
  version: "1.0"
paths:
  /comments:
    post:
      consumes:
      - application/json
      description: Save a new comment
      parameters:
      - description: Comment
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
      summary: Save a new comment
      tags:
      - comments
  /comments/{id}:
    delete:
      description: Delete a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Delete a comment by ID
      tags:
      - comments
  /comments/recipe/{recipeId}:
    get:
      description: Get comments by recipe ID
      parameters:
      - description: Recipe ID
        in: path
        name: recipeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
      summary: Get comments by recipe ID
      tags:
      - comments
  /ratings:
    post:
      consumes:
      - application/json
      description: Save a new rating
      parameters:
      - description: Rating
        in: body
        name: rating
        required: true
        schema:
          $ref: '#/definitions/models.Rating'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Rating'
      summary: Save a new rating
      tags:
      - ratings
  /ratings/{id}:
    delete:
      description: Delete a rating by ID
      parameters:
      - description: Rating ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Delete a rating by ID
      tags:
      - ratings
  /ratings/recipe/{recipeId}:
    get:
      description: Get ratings by recipe ID
      parameters:
      - description: Recipe ID
        in: path
        name: recipeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Rating'
            type: array
      summary: Get ratings by recipe ID
      tags:
      - ratings
  /recipes:
    post:
      consumes:
      - application/json
      description: Save a new recipe
      parameters:
      - description: Recipe
        in: body
        name: recipe
        required: true
        schema:
          $ref: '#/definitions/models.Recipe'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Recipe'
      summary: Save a new recipe
      tags:
      - recipes
  /recipes/{id}:
    delete:
      description: Delete a recipe by ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Delete a recipe by ID
      tags:
      - recipes
  /recipes/author/{authorId}:
    get:
      description: Get recipes by author ID
      parameters:
      - description: Author ID
        in: path
        name: authorId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Recipe'
            type: array
      summary: Get recipes by author ID
      tags:
      - recipes
  /users/{username}:
    get:
      description: Get user by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Get user by username
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Register a new user
      tags:
      - users
swagger: "2.0"
